call plug#begin()

Plug 'cdmedia/itg_flat_vim'                    " Theme I like so much
Plug 'vim-airline/vim-airline'                 " Status line
Plug 'vim-airline/vim-airline-themes'          " Themes for status line
Plug 'edkolev/tmuxline.vim'                    " Make tmux statusbar pretty
Plug 'bronson/vim-trailing-whitespace'         " Hightlight and get rid of trailing whitespaces
Plug 'tpope/vim-surround'                      " Surrounding with parentheses, brackets, quotes, tags etc.
Plug 'tpope/vim-repeat'                        " Repeating more actions (for instance, surrounding)
Plug 'tpope/vim-commentary'                    " Commenting and uncommenting stuff
Plug '907th/vim-auto-save'                     " Automatically save changes to disk
Plug 'Lokaltog/vim-easymotion'                 " Faster navigation within (or even between) a file
Plug 'tpope/vim-rails'                         " Siplified navigaton in a Rails project
Plug 'thoughtbot/vim-rspec'                    " Running specs from vim
Plug 'christoomey/vim-tmux-navigator'          " Tmux integration
Plug 'chaoren/vim-wordmotion'                  " Expand vims' knowledge what could be considered 'word'
Plug 'airblade/vim-gitgutter'                  " Git diff
Plug 'tmux-plugins/vim-tmux-focus-events'      " Proper autoread files
Plug 'tpope/vim-unimpaired'                    " Insert empty new lines from normal mode (and much more; explore later)
Plug 'christoomey/vim-sort-motion'             " No more sorting manually, yay!
Plug 'christoomey/vim-system-copy'             " Copying to the system clipboard with text-objects and motions
Plug 'slim-template/vim-slim'                  " Slim syntax highlighting for vim
Plug 'mileszs/ack.vim'                         " Silver searcher

Plug 'junegunn/vim-easy-align'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }         " Fuzzy-finder
Plug 'junegunn/fzf.vim'

" Plug 'chriskempson/base16-vim'
" Plug 'sainnhe/gruvbox-material'

" Plug 'christoomey/vim-tmux-runner'

" Plug 'ryanoasis/vim-devicons' " This needs to go last to it can alter other plugins

call plug#end()

syntax on
syntax enable
filetype plugin indent on            " Enable indentation rules that are file-type specific

" colorscheme base16-ocean
" colorscheme base16-eighties
" set termguicolors
colorscheme itg_flat_transparent

" colorscheme gruvbox-material
" let g:gruvbox_material_background = 'medium'
" set termguicolors
" set background=dark
" let g:airline_theme = 'gruvbox_material'

" let g:airline_theme='base16'
let g:airline_theme='jellybeans'
let g:airline#extensions#tabline#enabled = 1
" let base16colorspace=256

" Enable built-in matchit plugin which allows to use '%' to move between module, class, method and block definition and ending
runtime macros/matchit.vim

let mapleader = " "

set nocompatible              " Don't maintain compatibility with Vi
set history=10000             " Remember last 10000 commands

" set lazyredraw                " Don't update while executing a macros
" set backspace=indent,eol,start "Sane backspace behavior

set autoindent                " New lines inherit the indentation of previous lines
set expandtab                 " Convert <tab> to spaces (2 or 4)
set tabstop=2                 " Indent using two spaces per tab as default
set smarttab                  " Insert “tabstop” number of spaces when the <tab> key is pressed
set shiftwidth=2              " Spaces per tab per filetype

set list listchars=tab:»·,trail:·   " Display tabs and trailing spaces visually
set linebreak                 " Avoid wrapping a line in the middle of a word

" set autowrite        " Automatically save changes before switching buffers
set number                    " Show line numbers
set relativenumber            " Show relative line numbers with absolute number on the current line
set laststatus=2              " Always show the status line
set splitright                " Open new split panes to right and bottom
set splitbelow
set incsearch                 " Highlight while searching
set ignorecase                " Include matching pattern in search result no matter the case
set smartcase                 " Include only matching case in search results if search pattern includes upper case letters
set hlsearch                  " Highlight all matches after entering search pattern
set scrolloff=5               " Keep at least 5 lines below the cursor
set directory=~/.vim/swap/    " Save swp files to a less annoying place than the current directory
set nobackup                  " Don't create backup files, use git for that purpose

set ttimeout                  " Eliminating delay on <esc> key; also usefull for mappings which use it
set ttimeoutlen=0
set timeoutlen=1000


set undofile                  " undofile - This allows you to use undos after exiting and restarting
set undodir=~/.vim/undo/

" -----------------------------------------------------------------
" ----------------------------| Try | -----------------------------
" -----------------------------------------------------------------

autocmd BufWritePost * GitGutter

highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1
" highlight GitGutterAdd    ctermfg=2
" highlight GitGutterChange guifg=#bbbb00 ctermfg=3
" highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '▌'
let g:gitgutter_sign_modified = '▌'
let g:gitgutter_sign_removed = '▌'
let g:gitgutter_sign_modified_removed = '∙'

" tmuxline.vim plugin settings
" TODO: make it show battery_percentage
let g:tmuxline_preset = {
      \'a'       : '#S',
      \'win'     : ['#I', '#W'],
      \'cwin'    : ['#I#F', '#W'],
      \'x'       : '#{battery_percentage}',
      \'y'       : '#(xkb-switch)',
      \'z'       : '%a, %b %d - %l:%M %p',
      \'options' : {'status-justify' : 'left'}}


" for tmuxline + vim-airline integration
" let g:airline#extensions#tmuxline#enabled = 1
" start tmuxline even without vim running
" let airline#extensions#tmuxline#snapshot_file = "~/.tmux-status.conf"
" :Tmuxline airline
" :TmuxlineSnapshot ~/.tmux-status.conf

" Quick acccess to notes directory
map <Leader>n :tabe ~/learn/notes<cr>
map <Leader>tn :tabe ~/learn/notes<cr>
map <Leader>vn :vsp ~/learn/notes<cr>

" Highlight 81st character only, and only when the text exceeds 80 characters
" stops working after exiting, works again if sorce vimrc
" highlight ColorColumn ctermbg=darkblue
" call matchadd('ColorColumn', '\%81v', 100)

" Disable last search highlight re-appearing when sourcing .vimrc
" setting this option causes significant lags
" let @/ = ""

" if executable('ag')
  " let g:ackprg = 'ag --vimgrep'
  " set grepprg=ag\ --nogroup\ --nocolor
  " set grepprg=ag\ --nogroup\ --nocolor\ --column
  " set grepformat=%f:%l:%c%m
" endif

" command! -bang -nargs=* Ag
"   \ call fzf#vim#grep(
"   \   'ag --column --numbers --noheading --color --smart-case '.shellescape(<q-args>), 1,
"   \   fzf#vim#with_preview(), <bang>0)

" map <C-g> :Ag

" bind K to grep word under cursor
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" nnoremap K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

" noremap <Leader>y :Ag! "<cword>"<cr>


" " turn terminal to normal mode with escape
" tnoremap <Esc> <C-\><C-n>
" " start terminal in insert mode
" au BufEnter * if &buftype == 'terminal' | :startinsert | endif
" " open terminal on ctrl+n
" function! OpenTerminal()
"   split term://bash
"   resize 10
" endfunction
" nnoremap <c-n> :call OpenTerminal()<CR>


" The Silver Searcher
" Inspired by http://robots.thoughtbot.com/faster-grepping-in-vim/
" if executable('ag')
"   " Use ag over grep
"   set grepprg=ag\ --nogroup\ --nocolor\ --path-to-ignore\ $HOME/.agignore

"   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"   let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

"   " ag is fast enough that CtrlP doesn't need to cache
"   let g:ctrlp_use_caching = 0

"   " bind K to grep word under cursor
"   nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"   " bind , (backward slash) to grep shortcut
"   command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

"   nnoremap , :Ag<SPACE>
" endif


" " Files + devicons
" function! Fzf_files_with_dev_icons(command)
"   let l:fzf_files_options = '--preview "bat --color always --style numbers {2..} | head -'.&lines.'"'

"   function! s:edit_devicon_prepended_file(item)
"     let l:file_path = a:item[4:-1]
"     execute 'silent e' l:file_path
"   endfunction

"   call fzf#run({
"         \ 'source': a:command.' | devicon-lookup --color',
"         \ 'sink':   function('s:edit_devicon_prepended_file'),
"         \ 'options': '--ansi -m ' . l:fzf_files_options,
"         \ 'down':    '40%' })
" endfunction

" " Open fzf Files
" map <C-f> :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND . " --color always")<CR>


" Wrap the quickfix window
" autocmd FileType qf setlocal wrap linebreak


" Buffers
" map <leader>bd :bufdo bdelete<cr>

" " Insert a hash rocket with <c-l>
" imap <c-l> <space>=><space>

" " Can't be bothered to understand ESC vs <c-c> in insert mode
" inoremap <c-c> <esc>

" " Spellcheck
" autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
" autocmd FileType gitcommit setlocal spell spelllang=en_us
" set complete+=kspell

" function! FzfSpellSink(word)
"   exe 'normal! "_ciw'.a:word
" endfunction

" function! FzfSpell()
"   let suggestions = spellsuggest(expand("<cword>"))
"   return fzf#run({'source': suggestions, 'sink': function("FzfSpellSink"), 'down': 10 })
" endfunction
" nnoremap z= :call FzfSpell()<CR>
" " Spellcheck

" " Use K to show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction


" Close all other splits
" nnoremap <leader>o :only<cr>


" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)




" ---------------------------------------------------------------
" ---------------| General settings and mappings |---------------
" ---------------------------------------------------------------

" Never ever use arrow keys
noremap <Up>    <nop>
noremap <Down>  <nop>
noremap <Left>  <nop>
noremap <Right> <nop>

" Just don't
inoremap <Up>    <nop>
inoremap <Down>  <nop>
inoremap <Left>  <nop>
inoremap <Right> <nop>

" Open netrw on vim load
autocmd VimEnter * if !argc() | Explore | endif

" Automatically leave insert mode after 'updatetime' milliseconds of inaction
au CursorHoldI * stopinsert

" Set 'updatetime' to 15 seconds when in insert mode
au InsertEnter * let updaterestore=&updatetime | set updatetime=15000
au InsertLeave * let &updatetime=updaterestore

" Don't automatically continue comments after newline
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Rapid open and source vimrc
map <Leader>vi :tabe ~/.vimrc<cr>
map <Leader>so :so %<cr>

" Quick access to .gitconfig, .zshrc and .tmux.conf
map <Leader>git :tabe ~/.gitconfig<cr>
map <Leader>zsh :tabe ~/.zshrc<cr>
map <Leader>tmux :tabe ~/.tmux.conf<cr>

" Fuzzy-finding files and buffers
nnoremap <silent> <C-p> :FZF<cr>
nnoremap <silent> <Leader>p :Buffers<cr>

" Close the tab and delete the buffer
map <Leader>q :bd<cr>

" Quit fast
map <Leader>x :qall<cr>

" Clear the highlighting of previous search pattern matches
nnoremap <silent><esc><esc> :noh<cr>

" Cycle through all opened splits in current tab
map <Leader>w <C-w>w

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Go to beginning of the line
nmap 0 ^

" Home row escape sequences, so I don't bother reaching for <esc> key any longer
imap jk <esc>
imap kj <esc>
imap jj <esc>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Move line down and up
noremap <Leader>j :m .+1<cr>
noremap <Leader>k :m .-2<cr>

" Emacs-like beginning and end of line
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Indenting whole file and staying where you were
map <Leader>i mmgg=G`m

" Get rid of comments (only works if a line begins with '#' - should inprove)
map <Leader>m :g/^#/d<cr>

" Toggle colourcolumn
map <Leader>cc :set cc=80<cr>
map <Leader>dcc :set cc=<cr>

" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <Leader>r :call RenameFile()<cr>

" Delete Current File
fun! DeleteCurrentFile()
  call delete(expand('%')) | bdelete!
endfun
nnoremap <Del><Del> :call DeleteCurrentFile()<cr>

" Create file in a directory (or a few nested directories) wich doesn't exist yet
function! CreateDirectoryAskConfirmation(path, dir)
    silent doautocmd BufWritePre

    " Directory exists, :write and return
    if isdirectory(a:dir)
        execute 'write ' . a:path
        silent doautocmd BufWritePost
        return
    endif

    " Ask for confirmation to create this directory
    echohl Question
    echo "Create directory `" . a:dir . "' [y/N]?"
    echohl None

    let response = nr2char(getchar())
    " mkdir() and :write if we want to make a directory
    if response ==? "y"
        call mkdir(a:dir, "p")
        execute 'write ' . a:path
        silent doautocmd BufWritePost
    endif
endfunction

autocmd BufWriteCmd * call CreateDirectoryAskConfirmation(expand("<amatch>:p"), expand("<amatch>:p:h"))


" -----------------------------------------------------------
" ---- | Ruby and Rails specific settings and mappings | ----
" -----------------------------------------------------------

" Debugging
nnoremap <leader>d orequire 'pry-byebug'; binding.pry<esc>

map <Leader>sc :sp db/schema.rb<cr>

" =======================================================================
" ===============| Plugin specific settings and mappings |===============
" =======================================================================
"
" vim-rails plugin mappings
map <Leader>vm :Vmodel<cr>
map <Leader>vv :Vview
map <Leader>vc :Vcontroller<cr>

map <Leader>tm :Tmodel<cr>
map <Leader>tv :Tview
map <Leader>tc :Tcontroller<cr>
" Open the associated test file in a vertical split
map <Leader>vu :AV<cr>

" vim-rspec mappings
map <Leader>t :call RunCurrentSpecFile()<cr>
map <Leader>s :call RunNearestSpec()<cr>
map <Leader>l :call RunLastSpec()<cr>
map <Leader>a :call RunAllSpecs()<cr>

let g:rspec_command = "!clear && bin/rspec {spec}"

" vim-auto-save plugin settings
let g:auto_save = 1                                               " Enable AutoSave on Vim startup
let g:auto_save_silent = 1                                        " Do not display the auto-save notification
let g:auto_save_events = ["InsertLeave", "TextChanged"]           " Save on every change in normal mode and every time after leaving insert mode

" vim-trailing-whitespace plugin settings
map <Leader>f :FixWhitespace<cr>

" https://github.com/neoclide/coc.nvim#example-vim-configuration
" <TAB>: completion.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

let g:coc_global_extensions = ['coc-solargraph']

" When / if reinstalling, run ':CocConfig' and add lines below to the
" configuration file
"{
"  "solargraph.diagnostics": true
"}

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>
